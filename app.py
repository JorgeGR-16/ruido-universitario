import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata
import io

# --- CONFIGURACI√ìN DE P√ÅGINA ---
st.set_page_config(page_title="Visualizaci√≥n de Niveles de Sonido", layout="wide")

# --- ESTILO CSS PARA DISE√ëO LIMPIO ---
st.markdown("""
    <style>
        .stApp {
            background-color: white;
            color: black;
        }
        h1, h2, h3, h4, h5, h6, p {
            color: black;
        }
        .subheader {
            color: #333;
        }
    </style>
""", unsafe_allow_html=True)


# --- LOGO Y T√çTULO ---
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.image("logo_universidad.png", use_container_width=True)

st.title(" **Investigaci√≥n del comportamiento del ruido en un ambiente universitario**")
st.markdown('<p class="subheader">Aplicaci√≥n de an√°lisis ac√∫stico para investigaci√≥n t√©cnica</p>', unsafe_allow_html=True)

# --- MEN√ö DE NAVEGACI√ìN ---
seccion = st.radio(
    "Selecciona una secci√≥n",
    ["Introducci√≥n", "Objetivo", "Resultados"],
    horizontal=True
)

st.markdown("""---""")

# --- SECCIONES ---
if seccion == "Introducci√≥n":
    with st.container():
        st.markdown("### Introducci√≥n")
        st.markdown("""
       ** El presente proyecto tiene como objetivo investigar c√≥mo afecta el ruido ambiental en una zona espec√≠fica de la universidad mediante la instalaci√≥n y uso de son√≥metros para medir los niveles sonoros.
        El ruido es un factor ambiental que puede influir negativamente en la calidad de vida, el rendimiento acad√©mico y la salud de estudiantes y personal universitario. Por ello, es fundamental identificar y cuantificar las fuentes y niveles de ruido presentes para poder plantear estrategias de mitigaci√≥n efectivas.
        A trav√©s de esta investigaci√≥n, se pretende obtener datos precisos que permitan evaluar el impacto ac√∫stico en el entorno universitario y promover un ambiente m√°s adecuado para el estudio y desarrollo acad√©mico.
        La red est√° conformada por varios son√≥metros basados en el microcontrolador LoRa32, un micr√≥fono digital INMP441 y una bater√≠a recargable, todo alojado en una carcasa impresa en 3D.
        La red utiliza una topolog√≠a de estrella en la que los son√≥metros se comunican directamente con un gateway central, tambi√©n basado en un LoRa32. Este gateway act√∫a como puente entre los sensores y una computadora central, permitiendo la transferencia de datos de ruido en tiempo real, mediante enlace USB o el protocolo MQTT.
        **""")

        st.markdown("### 1.1 Principio de funcionamiento")

        st.markdown("""
        **1. Captaci√≥n del sonido:**  
        El sonido ambiente es captado por un micr√≥fono de condensador, el cual detecta las variaciones de presi√≥n del aire generadas por las ondas sonoras.

        **2. Conversi√≥n el√©ctrica:**  
        Estas variaciones se transforman en una se√±al el√©ctrica proporcional a la presi√≥n ac√∫stica.

        **3. Procesamiento de la se√±al:**  
        La se√±al el√©ctrica es amplificada y procesada mediante un circuito electr√≥nico o un microcontrolador. Durante este proceso, se aplica una ponderaci√≥n frecuencial (normalmente del tipo A), que ajusta la medici√≥n de acuerdo con la sensibilidad del o√≠do humano.

        **4. C√°lculo y visualizaci√≥n en decibelios (dB):**  
        Finalmente, el sistema calcula el nivel de presi√≥n sonora utilizando la f√≥rmula logar√≠tmica:
        """)

        st.latex(r'''
        \text{Nivel de presi√≥n sonora (dB)} = 20 \cdot \log_{10} \left(\frac{P}{P_0}\right)
        ''')

        st.markdown("""
        Donde:  
        - \( P \): presi√≥n sonora medida  
        - \( P_0 = 20\,\mu\text{Pa} \): presi√≥n sonora de referencia en el aire
        """)
        st.markdown("### 1.2 Diagrama del dispositivo.")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
         st.image("Diagrama.png", use_container_width=True)
        


elif seccion == "Objetivo":
    with st.container():
        st.markdown("### Objetivo")
        st.markdown("""
        * Visualizar el comportamiento del sonido en una √°rea espec√≠fica, utilizando sensores y gr√°ficos, para comprender con mayor claridad en qu√© zonas afectan m√°s las alteraciones sonoras.
        """)

elif seccion == "Resultados":
    st.markdown("###  Resultados")

    # --- SIDEBAR DE PAR√ÅMETROS ---
    with st.sidebar:
        st.header("Par√°metros de entrada")
        uploaded_file = "mediciones_1.csv"  # ‚Üê nuevo nombre sin espacios

    try:
        df = pd.read_csv(uploaded_file, skiprows=3)

        columnas_requeridas = ['_time', 'nodo', '_value']
        if not all(col in df.columns for col in columnas_requeridas):
            st.error(f"El CSV debe contener las columnas: {columnas_requeridas}")
        else:
            df['_time'] = pd.to_datetime(df['_time'], format='%Y-%m-%dT%H:%M:%S.%fZ', utc=True, errors='coerce')

            if df['_time'].isna().any():
                st.warning(" Algunas fechas no se pudieron convertir correctamente.")

            tiempo_min = df['_time'].min()
            tiempo_max = df['_time'].max()

            # --- FILTRO DE TIEMPO ---
            with st.expander(" Filtro temporal", expanded=True):
                fecha = st.date_input("Fecha", value=tiempo_min.date(), min_value=tiempo_min.date(), max_value=tiempo_max.date())
                hora_inicio = st.time_input("Hora de inicio", value=pd.to_datetime('00:00').time())
                hora_fin = st.time_input("Hora de fin", value=pd.to_datetime('23:59').time())

            fecha_inicio = pd.to_datetime(f"{fecha} {hora_inicio}").tz_localize('UTC')
            fecha_fin = pd.to_datetime(f"{fecha} {hora_fin}").tz_localize('UTC')

            df_filtrado = df[(df['_time'] >= fecha_inicio) & (df['_time'] <= fecha_fin)]

            if df_filtrado.empty:
                st.warning("No hay datos en el rango seleccionado.")
            else:
                st.success(f"Se encontraron {len(df_filtrado)} registros.")

                # --- PREPARACI√ìN PARA GR√ÅFICO ---
                X = df_filtrado['nodo'].astype(float).values
                fecha_base = pd.Timestamp(fecha).tz_localize('UTC')
                tiempos_segundos = (df_filtrado['_time'] - fecha_base).dt.total_seconds().values
                Z = df_filtrado['_value'].astype(float).values

                x_unique = np.unique(X)
                y_unique = np.unique(tiempos_segundos)
                X_grid, Y_grid = np.meshgrid(x_unique, y_unique)
                Z_grid = griddata((X, tiempos_segundos), Z, (X_grid, Y_grid), method='linear')

                # --- GR√ÅFICO PROFESIONAL ---
                fig, ax = plt.subplots(figsize=(10, 6))
                cmap = plt.get_cmap('jet')
                c = ax.pcolormesh(X_grid, Y_grid, Z_grid, shading='auto', cmap=cmap)
                cb = plt.colorbar(c, ax=ax, label='Nivel de sonido (dB)')

                yticks = ax.get_yticks()
                ylabels = [(fecha_base + pd.Timedelta(seconds=sec)).strftime('%H:%M') for sec in yticks]
                ax.set_yticks(yticks)
                ax.set_yticklabels(ylabels)

                ax.set_title("Mapa de niveles de sonido", fontsize=14)
                ax.set_xlabel("Nodos")
                ax.set_ylabel("Hora (HH:MM)")

                st.markdown("A continuaci√≥n se muestra un mapa de calor que representa los niveles de ruido captados por cada nodo a lo largo del tiempo.")
                st.pyplot(fig)

                # --- GR√ÅFICO DE L√çNEAS POR NODO ---
                st.markdown("#### üìà Evoluci√≥n temporal por nodo")
                for nodo in sorted(df_filtrado["nodo"].unique()):
                    st.subheader(f"Nodo {nodo}")
                    datos_nodo = df_filtrado[df_filtrado["nodo"] == nodo]
                    st.line_chart(datos_nodo.set_index("_time")["_value"], height=200, use_container_width=True)

                

    except Exception as e:
        st.error(f" Error al procesar el archivo: {e}")

